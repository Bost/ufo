(ns ^:figwheel-always ufo.meth
  (:require
   ;; [ufo [...]] ; is not supported by clojurescript
   [ufo.state :as state]
   [ufo.utils :as utils]
   [ufo.regexps :as re :refer [dbg dbi id]]
   [om.next :as om]
   [cljs-time.core :as time]))

(enable-console-print!)

(defn get-list [state key]
  (let [st @state]
    (vec (map #(get-in st %) (get st key)))))

(defmethod state/mutate 'setusers!
  [{:keys [state]} _ {:keys [users]}]
  {:value  {:keys [:list/rows]}
   :action #(swap! state assoc :list/rows users)})

(defn read-key [state ns-key]
  (let [key (->> ns-key name keyword)
        st @state ]
    (do
      (if-let [[_ v] (find st key)]
        (if (empty? v)
          (let [tbeg (time/now)]
            (println "read-key" key "Searching in DB...")
            (utils/ednxhr
             {:reqprm {:f key :prm-foo "foo" :prm-bar "bar"}
              :oncomplete
              (fn [resp]
                (om/transact!
                 state/reconciler
                 `[('setusers! {:list/rows {:resp resp :tbeg tbeg :tend (time/now)}})])
                )}))))
      ;; eventually return an empty val
      {:value (get st key)})))

(defmethod state/read :list/rows
  [{:keys [state query] :as env} ns-dispatch-key params]
  (read-key state ns-dispatch-key))

